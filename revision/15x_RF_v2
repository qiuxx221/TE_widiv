library("caret")
library("randomForest")
library("kernlab")
library("tidyverse")
library("caTools")
library("tidyr")
library("tidyverse")


Prior_1015x_present_full <- read.csv("present_10_15x.txt", sep="\t",header = FALSE)
Prior_1015x_absent_full <- read.csv("absent_10_15x.txt", sep="\t",header = FALSE)


Prior_1015x_absent_full = rbind(Prior_1015x_present_full,Prior_1015x_absent_full)

colnames(Prior_1015x_absent_full) <- c("TE_ID","10bp_Coverage","Position","Mean_genomewide_coverage","Sequenced_genome","Ref_genome","TE_PAV")

reshape_df = Prior_1015x_absent_full  %>% 
  pivot_wider(names_from = "Position", values_from = "10bp_Coverage") 


reshape_df$TE_fam <- substr(reshape_df$TE_ID, 0, 3)
table(reshape_df$Ref_genome)

reshape_df$TE_order <-ifelse(reshape_df$TE_fam == "DHH",rr2 <-"Helitron",
                                      ifelse(reshape_df$TE_fam == "DTA",rr2 <-"TIR",
                                             ifelse(reshape_df$TE_fam == "DTC", rr2<-"TIR",
                                                    ifelse(reshape_df$TE_fam == "DTH", rr2<-"TIR", 
                                                           ifelse(reshape_df$TE_fam == "DTM", rr2<-"TIR", 
                                                                  ifelse(reshape_df$TE_fam == "DTT", rr2<-"TIR",
                                                                         ifelse(reshape_df$TE_fam == "DTX", rr2<-"TIR",
                                                                                ifelse(reshape_df$TE_fam == "RIL", rr2<-"LINE",
                                                                                       ifelse(reshape_df$TE_fam == "RIT", rr2<-"LINE",
                                                                                              ifelse(reshape_df$TE_fam == "RLC", rr2<-"LTR",
                                                                                                     ifelse(reshape_df$TE_fam == "RLG", rr2<-"LTR",
                                                                                                            ifelse(reshape_df$TE_fam == "RLX", rr2<-"LTR",
                                                                                                                   rr2<-"SINE"))))))))))))
       
       


# take B73 as sequeced genome and use it as tester 

no_B73_training <- reshape_df %>% filter(Sequenced_genome != "B73")
table(no_B73_training$TE_PAV) %>% prop.table()
#   present    absent 
#   0.7027192 0.2972808


B73_tester <- reshape_df %>% filter(Sequenced_genome == "B73")
table(B73_tester$TE_PAV) %>% prop.table()
#  present   absent 
# 0.722961 0.277039 

# from now, only keep TE_id start, and stop, pav information
reshape_df_base = no_B73_training %>% select("TE_ID","start","end","TE_fam","TE_PAV")
# downsample training_no_Mo17_ref in order to create a balanced classifier 
balanced_reshape_df_base = downSample(reshape_df_base[,2:4], reshape_df_base$TE_PAV, list = FALSE, yname = "TE_PAV")
table(balanced_reshape_df_base$TE_PAV) %>% prop.table()
# present  absent 
#    0.5     0.5 

data_fac=balanced_reshape_df_base %>% mutate_if(is.character, as.factor)

# caret random forest 
########### 
# 10 folds  3 repeat three times 

# take 0.8 of the whole set for training 

set.seed(123)
split = sample.split(data_fac$TE_PAV, SplitRatio = 0.8)
training_set = subset(data_fac, split == TRUE)
test_set_within = subset(data_fac, split == FALSE)


x <- training_set[,1:3]
y <- training_set[,4]


#10 folds repeat 3 times
control <- trainControl(method='repeatedcv', 
                        number=10, 
                        repeats=3)
#Metric compare model is Accuracy
metric <- "Accuracy"
set.seed(123)
#Number randomely variable selected is mtry
mtry <- sqrt(ncol(x))
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(TE_PAV~., 
                      data=training_set, 
                      method='rf', 
                      metric='Accuracy', 
                      tuneGrid=tunegrid, 
                      trControl=control)
print(rf_default)

saveRDS(rf_default, "no_B73_seq_10_15.rds")













# full set 

set.seed(123)
split = sample.split(balanced_reshape_df_base$TE_PAV, SplitRatio = 0.1)
training_set = subset(balanced_reshape_df_base, split == TRUE)
test_set_within = subset(balanced_reshape_df_base, split == FALSE)

table(balanced_reshape_df_base$TE_order)

data_fac=balanced_reshape_df_base %>% mutate_if(is.character, as.factor)

# random forest
rf <- randomForest(
  TE_PAV ~ .,
  data=data_fac
)




training_no_Mo17_ref_PH207 = reshape_df %>% filter(Ref_genome != "Mo17" & Sequenced_genome != "PH207" )

# subset info
downsamping_df_base = training_no_Mo17_ref_PH207 %>% select("TE_ID","start","end","TE_order","TE_PAV")
# downsample training_no_Mo17_ref in order to create a balanced classifier 
balanced_df = downSample(downsamping_df_base[,2:4], downsamping_df_base$TE_PAV, list = FALSE, yname = "TE_PAV")
table(balanced_df$TE_PAV) 


# subset 

set.seed(123)
split = sample.split(balanced_df$TE_PAV, SplitRatio = 0.8)
training_set = subset(balanced_df, split == TRUE)
test_set_within = subset(balanced_df, split == FALSE)

table(balanced_df$TE_order)

data_fac=balanced_df %>% mutate_if(is.character, as.factor)

# random forest
rf <- randomForest(
  TE_PAV ~ .,
  data=data_fac
)
                                                                                                                          
                                                                                                                          
                                                                                                                      
########### 10 folds  3 repeat three times 

x <- data_fac[,1:3]
y <- data_fac[,4]



#10 folds repeat 3 times
control <- trainControl(method='repeatedcv', 
                        number=10, 
                        repeats=3)
#Metric compare model is Accuracy
metric <- "Accuracy"
set.seed(123)
#Number randomely variable selected is mtry
mtry <- sqrt(ncol(x))
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(TE_PAV~., 
                      data=data_fac, 
                      method='rf', 
                      metric='Accuracy', 
                      tuneGrid=tunegrid, 
                      trControl=control)
print(rf_default)



